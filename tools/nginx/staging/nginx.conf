# Configure nginx event handling
events {
  # Maximum number of simultaneous connections per worker process
  worker_connections 1024;
}

# HTTP server configuration block
http {
  # Include MIME type definitions for serving correct content types
  include /etc/nginx/mime.types;
  
  server {
    # Listen on port 80 for HTTP traffic
    listen 80;
    # Define the server name/domain
    server_name localhost;

    # Global proxy headers setup
    # Pass the original host header to upstream servers
    proxy_set_header Host $host;
    # Pass the real client IP address
    proxy_set_header X-Real-IP $remote_addr;
    # Append the client IP to X-Forwarded-For chain
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # Pass the original protocol (http/https)
    proxy_set_header X-Forwarded-Proto $scheme;

    # Trust all incoming IPs for real IP determination
    set_real_ip_from 0.0.0.0/0;
    # Use X-Forwarded-For header for real IP
    real_ip_header X-Forwarded-For;

    # Frontend
    location / {
      # Forward requests to Engelbart frontend service
      proxy_pass http://frontend:3000;
      # Use HTTP/1.1 for proxy connections
      proxy_http_version 1.1;
      
      # Extended timeout settings
      # Time to wait for response from upstream
      proxy_read_timeout 1800;
      # Time to wait for connection to upstream
      proxy_connect_timeout 1800;
      # Time to wait while sending data to upstream
      proxy_send_timeout 1800;
      
      # Logging configuration
      # Log successful requests
      access_log /var/log/nginx/frontend_access.log;
      # Log errors with debug detail
      error_log /var/log/nginx/frontend_error.log debug;
    }

    # Health Check
    location /ping {
      access_log off;
      add_header Content-Type text/plain;
      return 200 'OK';
    }

    # Static file handling
    # Match any static file extensions
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
      # Forward to Engelbart service
      proxy_pass http://frontend:3000;
      # Use HTTP/1.1
      proxy_http_version 1.1;
      # Pass host header
      proxy_set_header Host $host;
      # Log static file access
      access_log /var/log/nginx/static_access.log;
      # Log static file errors
      error_log /var/log/nginx/static_error.log debug;
    }

    # Backend
    location /backend {
      proxy_pass http://backend:3002/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
      error_log /var/log/nginx/sync_engine_error.log;
    }

    # Backend
    location /backend/ {
      proxy_pass http://backend:3002/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
      error_log /var/log/nginx/sync_engine_error.log;
    }
  }
}
